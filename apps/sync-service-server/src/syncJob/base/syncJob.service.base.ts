/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SyncJob as PrismaSyncJob } from "@prisma/client";

export class SyncJobServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SyncJobCountArgs, "select">): Promise<number> {
    return this.prisma.syncJob.count(args);
  }

  async syncJobs<T extends Prisma.SyncJobFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncJobFindManyArgs>
  ): Promise<PrismaSyncJob[]> {
    return this.prisma.syncJob.findMany<Prisma.SyncJobFindManyArgs>(args);
  }
  async syncJob<T extends Prisma.SyncJobFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncJobFindUniqueArgs>
  ): Promise<PrismaSyncJob | null> {
    return this.prisma.syncJob.findUnique(args);
  }
  async createSyncJob<T extends Prisma.SyncJobCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncJobCreateArgs>
  ): Promise<PrismaSyncJob> {
    return this.prisma.syncJob.create<T>(args);
  }
  async updateSyncJob<T extends Prisma.SyncJobUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncJobUpdateArgs>
  ): Promise<PrismaSyncJob> {
    return this.prisma.syncJob.update<T>(args);
  }
  async deleteSyncJob<T extends Prisma.SyncJobDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SyncJobDeleteArgs>
  ): Promise<PrismaSyncJob> {
    return this.prisma.syncJob.delete(args);
  }
}
