/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SyncJobService } from "../syncJob.service";
import { SyncJobCreateInput } from "./SyncJobCreateInput";
import { SyncJob } from "./SyncJob";
import { SyncJobFindManyArgs } from "./SyncJobFindManyArgs";
import { SyncJobWhereUniqueInput } from "./SyncJobWhereUniqueInput";
import { SyncJobUpdateInput } from "./SyncJobUpdateInput";

export class SyncJobControllerBase {
  constructor(protected readonly service: SyncJobService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SyncJob })
  async createSyncJob(
    @common.Body() data: SyncJobCreateInput
  ): Promise<SyncJob> {
    return await this.service.createSyncJob({
      data: data,
      select: {
        createdAt: true,
        id: true,
        lastRunTime: true,
        retryCount: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SyncJob] })
  @ApiNestedQuery(SyncJobFindManyArgs)
  async syncJobs(@common.Req() request: Request): Promise<SyncJob[]> {
    const args = plainToClass(SyncJobFindManyArgs, request.query);
    return this.service.syncJobs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        lastRunTime: true,
        retryCount: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SyncJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async syncJob(
    @common.Param() params: SyncJobWhereUniqueInput
  ): Promise<SyncJob | null> {
    const result = await this.service.syncJob({
      where: params,
      select: {
        createdAt: true,
        id: true,
        lastRunTime: true,
        retryCount: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SyncJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSyncJob(
    @common.Param() params: SyncJobWhereUniqueInput,
    @common.Body() data: SyncJobUpdateInput
  ): Promise<SyncJob | null> {
    try {
      return await this.service.updateSyncJob({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          lastRunTime: true,
          retryCount: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SyncJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSyncJob(
    @common.Param() params: SyncJobWhereUniqueInput
  ): Promise<SyncJob | null> {
    try {
      return await this.service.deleteSyncJob({
        where: params,
        select: {
          createdAt: true,
          id: true,
          lastRunTime: true,
          retryCount: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
